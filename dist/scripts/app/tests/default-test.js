define(["underscore","jquery","parse","../models/Vampire","backbone","../models/Troupe","../models/SimpleTrait","../siteconfig"],function(e,t,n,i,o,c,a,r){jasmine.DEFAULT_TIMEOUT_INTERVAL=6e4;var s=function(){n.$=t,n.initialize("APPLICATION_ID","yymp8UWnJ7Va32Y2Q4uzvWxfPTYuDvZSA8kdhmdR"),n.serverURL=r.serverURL};describe("A suite",function(){it("contains spec with an expectation",function(){expect(!0).toBe(!0)})});var u=function(){return s(),e.eq(n.User.current().get("username"),"devuser")?n.Promise.as(n.User.current()):n.User.logIn("devuser","thedumbness")},p=function(){return s(),e.eq(n.User.current().get("username"),"sampmem")?n.Promise.as(n.User.current()):n.User.logIn("sampmem","sampmem")},g=function(){return s(),e.eq(n.User.current().get("username"),"sampast")?n.Promise.as(n.User.current()):n.User.logIn("sampast","sampast")};describe("Parse",function(){beforeAll(function(){s(),n.User.current()&&n.User.logOut()}),it("isn't logged in",function(){expect(n.User.current()).toBe(null)}),it("can fail to log in",function(e){n.User.logIn("devuser","thewrongness").then(function(t){e.fail("Logged in with bad password")},function(t,n){e(n)})}),it("can log in",function(e){n.User.logIn("devuser","thedumbness").then(function(t){e()},function(t,n){e.fail(n)})})}),describe("A Vampire's traits",function(){var t,o;beforeAll(function(e){u().then(function(){return i.create_test_character("vampiretraits")}).then(function(e){return o=5,i.get_character(e.id)}).then(function(n){t=n,e()},function(t){e.fail(t)})}),it("show up in the history",function(e){t.get_recorded_changes().done(function(e){return expect(e.models.length).toBe(o),t.update_trait("Haven",1,"backgrounds",0,!0)}).done(function(e){return o++,t.get_recorded_changes()}).done(function(e){return expect(e.models.length).toBe(o),t.update_trait("Haven",1,"backgrounds",0,!0)}).done(function(e){return t.get_recorded_changes()}).done(function(e){return expect(e.models.length).toBe(o),t.update_trait("Haven",2,"backgrounds",0,!0)}).done(function(e){return o++,t.get_recorded_changes()}).done(function(t){expect(t.models.length).toBe(o),e()}).fail(function(t){e.fail(t)})}),it("can be renamed",function(n){var i=o;t.update_trait("Retainers",1,"backgrounds",0,!0).done(function(e){return o++,e.set("name","Retainers: Specialized Now"),t.update_trait(e)}).done(function(e){return o++,e.set("name","Retainers: Specialized Again"),e.set("value",4),t.update_trait(e)}).done(function(e){return o++,e.set("value",5),t.update_trait(e)}).done(function(){return o++,t.update_trait("Retainers: Specialized Now",2,"backgrounds",0,!0)}).done(function(){return o++,t.update_trait("Retainers",3,"backgrounds",0,!0)}).done(function(){return o++,t.update_trait("Retainers: Specialized Now",4,"backgrounds",0,!0)}).done(function(){return o++,t.update_trait("Retainers",4,"backgrounds",0,!0)}).done(function(){return o++,t.get_recorded_changes()}).done(function(t){expect(t.models.length).toBe(o),e(t.models).slice(i,t.length).each(function(t,n){expect(t.get("name")).not.toBe(void 0);var i=t.get("name"),o=e.startsWith(i,"Retainers");o&&(0==n?(expect(t.get("type")).toBe("define"),expect(t.get("value")).toBe(1),expect(t.get("cost")).toBe(1)):1==n?(expect(t.get("type")).toBe("update"),expect(t.get("value")).toBe(1),expect(t.get("cost")).toBe(1),expect(t.get("name")).toBe("Retainers: Specialized Now"),expect(t.get("old_text")).toBe("Retainers")):2==n?(expect(t.get("type")).toBe("update"),expect(t.get("value")).toBe(4),expect(t.get("cost")).toBe(10),expect(t.get("name")).toBe("Retainers: Specialized Again"),expect(t.get("old_text")).toBe("Retainers: Specialized Now")):3==n?(expect(t.get("type")).toBe("update"),expect(t.get("old_value")).toBe(4),expect(t.get("value")).toBe(5),expect(t.get("old_cost")).toBe(10),expect(t.get("cost")).toBe(15),expect(t.get("name")).toBe("Retainers: Specialized Again"),expect(t.get("old_text")).toBe("Retainers: Specialized Again")):4==n?(expect(t.get("type")).toBe("define"),expect(t.get("value")).toBe(2),expect(t.get("cost")).toBe(3),expect(t.get("name")).toBe("Retainers: Specialized Now")):5==n?(expect(t.get("type")).toBe("define"),expect(t.get("value")).toBe(3),expect(t.get("cost")).toBe(6),expect(t.get("name")).toBe("Retainers")):6==n?(expect(t.get("type")).toBe("update"),expect(t.get("value")).toBe(4),expect(t.get("old_value")).toBe(2),expect(t.get("old_cost")).toBe(3),expect(t.get("cost")).toBe(10),expect(t.get("name")).toBe("Retainers: Specialized Now"),expect(t.get("old_text")).toBe("Retainers: Specialized Now")):7==n&&(expect(t.get("type")).toBe("update"),expect(t.get("value")).toBe(4),expect(t.get("old_value")).toBe(3),expect(t.get("old_cost")).toBe(6),expect(t.get("cost")).toBe(10),expect(t.get("name")).toBe("Retainers"),expect(t.get("old_text")).toBe("Retainers")))})}).done(function(){n()}).fail(function(e){n.fail(e)})}),it("can't be renamed to collide",function(e){var n,i;t.update_trait("Retainers: Classic",1,"backgrounds",0,!0).done(function(e){return n=e,t.update_trait("Retainers: Not Classic",2,"backgrounds",0,!0)}).done(function(e){return i=e,i.set("name","Retainers: Classic"),t.update_trait(i)}).done(function(){e.fail("Allowed the rename to be persisted")}).fail(function(t){expect(t.code).toBe(1),expect(i.get("name")).toBe("Retainers: Not Classic"),e()})}),it("can fail to be removed",function(e){var i=a.prototype.destroy;a.prototype.destroy=function(){return n.Promise.error({})},t.get_trait_by_name("backgrounds","Haven").then(function(n){return t.remove_trait(n).then(function(){a.prototype.destroy=i,e.fail("Successfully removed a trait while destroy was broken")},function(n){a.prototype.destroy=i,t.get_trait_by_name("backgrounds","Haven").then(function(t){expect(t.get("value")).toBe(2),expect(t.get("free_value")).toBe(0),e()},function(t){e.fail(t)})})})}),it("can be removed",function(e){t.get_trait_by_name("backgrounds","Haven").then(function(e){return expect(e).toBeDefined(),expect(e.id).toBeDefined(),t.remove_trait(e)}).then(function(){return t.get_trait_by_name("backgrounds","Haven")}).then(function(t){expect(t).toBeUndefined(),e()}).fail(function(t){e.fail("Failed to remove the trait "+JSON.stringify(t))})})}),describe("A Vampire's creation",function(){var t;beforeAll(function(e){u().then(function(){return i.create_test_character("vampirecreation")}).then(function(e){return i.get_character(e.id)}).then(function(n){t=n,e()},function(t){e.fail(t)})}),it("can pick a clan",function(e){t.update_text("clan","TestClan").then(function(){expect(t.get("clan")).toBe("TestClan"),e()},function(t){e.fail(t)})}),it("can repick a clan",function(e){t.update_text("clan","DifferentClan").then(function(){expect(t.get("clan")).toBe("DifferentClan"),e()},function(t){e.fail(t)})}),it("can pick Physical as a primary attribute",function(e){var n=t.get("creation");expect(n.get("attributes_7_remaining")).toBe(1),expect(n.get("attributes_7_picks")).toBe(void 0),t.update_trait("Physical",1,"attributes",7,!0).then(function(e){return expect(t.get("creation").get("attributes_7_remaining")).toBe(0),expect(t.get("creation").get("attributes_7_picks").length).toBe(1),expect(t.get("creation").get("attributes_7_picks")[0].get("name")).toBe("Physical"),expect(t.get("creation").get("attributes_7_picks")[0].get("value")).toBe(7),t.get_trait("attributes",e.id||e.cid)}).then(function(t){expect(t).not.toBe(void 0),expect(t.get("name")).toBe("Physical"),expect(t.get("value")).toBe(7),e()},function(t){e.fail(t)})}),it("can unpick Physical as a primary attribute",function(n){expect(t.get("creation").get("attributes_7_remaining")).toBe(0),expect(t.get("creation").get("attributes_7_picks").length).toBe(1);var i=e.first(t.get("creation").get("attributes_7_picks"));t.get_trait("attributes",i.id).then(function(e){return expect(e.get("name")).toBe("Physical"),expect(e.get("value")).toBe(7),t.unpick_from_creation("attributes",i.id,7,!0)}).then(function(){expect(t.get("creation").get("attributes_7_remaining")).toBe(1),expect(t.get("creation").get("attributes_7_picks").length).toBe(0),expect(t.get("attributes").length).toBe(0),n()},function(e){n.fail(e)})}),it("can pick a Physical focus",function(e){var n=t.get("creation");expect(n.get("focus_physicals_1_remaining")).toBe(1),expect(n.get("focus_physicals_1_picks")).toBe(void 0),t.update_trait("Dexterity",1,"focus_physicals",1,!0).then(function(e){return expect(t.get("creation").get("focus_physicals_1_remaining")).toBe(0),expect(t.get("creation").get("focus_physicals_1_picks").length).toBe(1),expect(t.get("creation").get("focus_physicals_1_picks")[0].get("name")).toBe("Dexterity"),expect(t.get("creation").get("focus_physicals_1_picks")[0].get("value")).toBe(1),t.get_trait("focus_physicals",e)}).then(function(t){expect(t).not.toBe(void 0),expect(t.get("name")).toBe("Dexterity"),expect(t.get("value")).toBe(1),console.log(JSON.stringify(t._saving)),e()},function(t){e.fail(t)})}),it("can repick a Physical focus",function(n){expect(t.get("creation").get("focus_physicals_1_remaining")).toBe(0),expect(t.get("creation").get("focus_physicals_1_picks").length).toBe(1);var i=e.first(t.get("creation").get("focus_physicals_1_picks"));t.get_trait("focus_physicals",i).then(function(e){return expect(e.get("name")).toBe("Dexterity"),expect(e.get("value")).toBe(1),t.unpick_from_creation("focus_physicals",e,1,!0)}).then(function(){return expect(t.get("creation").get("focus_physicals_1_remaining")).toBe(1),expect(t.get("creation").get("focus_physicals_1_picks").length).toBe(0),expect(t.get("focus_physicals").length).toBe(0),t.update_trait("Stamina",1,"focus_physicals",1,!0)}).then(function(e){return expect(t.get("creation").get("focus_physicals_1_remaining")).toBe(0),expect(t.get("creation").get("focus_physicals_1_picks").length).toBe(1),expect(t.get("creation").get("focus_physicals_1_picks")[0].get("name")).toBe("Stamina"),expect(t.get("creation").get("focus_physicals_1_picks")[0].get("value")).toBe(1),t.get_trait("focus_physicals",e)}).then(function(e){expect(e).not.toBe(void 0),expect(e.get("name")).toBe("Stamina"),expect(e.get("value")).toBe(1),n()},function(e){n.fail(e)})}),it("can unpick a Physical focus",function(n){expect(t.get("creation").get("focus_physicals_1_remaining")).toBe(0),expect(t.get("creation").get("focus_physicals_1_picks").length).toBe(1);var i=e.first(t.get("creation").get("focus_physicals_1_picks"));t.get_trait("focus_physicals",i).then(function(e){return expect(e.get("name")).toBe("Stamina"),expect(e.get("value")).toBe(1),t.unpick_from_creation("focus_physicals",e,1,!0)}).then(function(){expect(t.get("creation").get("focus_physicals_1_remaining")).toBe(1),expect(t.get("creation").get("focus_physicals_1_picks").length).toBe(0),expect(t.get("focus_physicals").length).toBe(0),n()},function(e){n.fail(e)})}),it("can pick a merit",function(e){var n=t.get("creation");expect(n.get("merits_0_remaining")).toBe(7),expect(n.get("merits_0_picks")).toBe(void 0),t.update_trait("Bloodline: Coyote",2,"merits",0,!0).then(function(e){return expect(t.get("creation").get("merits_0_remaining")).toBe(5),expect(t.get("creation").get("merits_0_picks").length).toBe(1),expect(t.get("creation").get("merits_0_picks")[0].get("name")).toBe("Bloodline: Coyote"),expect(t.get("creation").get("merits_0_picks")[0].get("value")).toBe(2),t.get_trait("merits",e)}).then(function(t){expect(t).not.toBe(void 0),expect(t.get("name")).toBe("Bloodline: Coyote"),expect(t.get("value")).toBe(2),e()},function(t){e.fail(t)})}),it("can change the value of a picked merit",function(e){var n=t.get("creation");expect(n.get("merits_0_remaining")).toBe(5),expect(n.get("merits_0_picks").length).toBe(1),t.update_trait("Bloodline: Coyote",3,"merits",0,!0).then(function(e){return expect(t.get("creation").get("merits_0_remaining")).toBe(4),expect(t.get("creation").get("merits_0_picks").length).toBe(1),expect(t.get("creation").get("merits_0_picks")[0].get("name")).toBe("Bloodline: Coyote"),expect(t.get("creation").get("merits_0_picks")[0].get("value")).toBe(3),t.get_trait("merits",e)}).then(function(t){expect(t).not.toBe(void 0),expect(t.get("name")).toBe("Bloodline: Coyote"),expect(t.get("value")).toBe(3),e()},function(t){e.fail(t)})}),it("can unpick a merit with a changed value",function(n){expect(t.get("creation").get("merits_0_remaining")).toBe(4),expect(t.get("creation").get("merits_0_picks").length).toBe(1);var i=e.first(t.get("creation").get("merits_0_picks"));t.get_trait("merits",i).then(function(e){return expect(e.get("name")).toBe("Bloodline: Coyote"),expect(e.get("value")).toBe(3),t.unpick_from_creation("merits",e,0,!0)}).then(function(){expect(t.get("creation").get("merits_0_remaining")).toBe(7),expect(t.get("creation").get("merits_0_picks").length).toBe(0),expect(t.get("merits").length).toBe(0),n()},function(e){n.fail(e)})})}),describe("A Vampire's experience history",function(){var t;beforeAll(function(e){u().then(function(){return i.create_test_character("experiencehistory")}).then(function(e){return i.get_character(e.id)}).then(function(n){t=n,e()},function(t){e.fail(t)})}),it("got initial xp",function(n){t.get_experience_notations().then(function(t){var i=e.last(t.models);expect(i.get("reason")).toBe("Character Creation XP"),expect(i.get("alteration_earned")).toBe(30),n()})}),it("reports initial xp",function(){expect(t.experience_available()).toBe(30),expect(t.get("experience_earned")).toBe(30),expect(t.get("experience_spent")).toBe(0)}),it("updates listeners on add",function(n){var i=o.View.extend({initialize:function(){e.bindAll(this,"finish")},finish:function(i){var o=this;expect(i.get("reason")).toBe("meet hands"),expect(i.get("alteration_earned")).toBe(24),t.get_experience_notations().then(function(t){var i=e.first(t.models);expect(i.get("reason")).toBe("meet hands"),expect(i.get("alteration_earned")).toBe(24),expect(i.get("earned")).toBe(54),o.stopListening(),n()})}});l=new i,t.get_experience_notations(function(e){l.listenTo(e,"add",l.finish),t.add_experience_notation({reason:"meet hands",alteration_earned:24})})}),it("can be quickly sequential",function(i){var o=e.map(e.range(1,20),function(e){return t.add_experience_notation({alteration_earned:e,alteration_spent:e})});n.Promise.when(o).then(function(){t.get_experience_notations().then(function(n){var o=(e.map(n.models,"attributes.alteration_earned"),e.dropRight(n.models,2)),c=54,a=c,r=1;e.eachRight(o,function(e){c+=r,expect(e.get("alteration_earned")).toBe(r),expect(e.get("alteration_spent")).toBe(r),expect(e.get("earned")).toBe(c),expect(e.get("spent")).toBe(c-a),r+=1}),expect(t.experience_available()).toBe(a),expect(t.get("experience_earned")).toBe(c),expect(t.get("experience_spent")).toBe(c-a),i()})},function(t){e.each(t,function(e){console.log("Failed to add experience notations"+e.message)}),i.fail()})}),it("can remove the top most",function(e){t.get_experience_notations().then(function(e){return t.remove_experience_notation(e.at(0))}).then(function(){return expect(t.experience_available()).toBe(54),expect(t.get("experience_earned")).toBe(225),expect(t.get("experience_spent")).toBe(171),t.fetch_experience_notations()}).then(function(t){expect(t.at(0).get("alteration_earned")).toBe(18),expect(t.at(0).get("alteration_spent")).toBe(18),e()},function(t){e.fail(t.message)})}),it("can remove a middle one",function(e){t.get_experience_notations().then(function(e){return t.remove_experience_notation(e.at(e.models.length-3))}).then(function(){expect(t.experience_available()).toBe(54),expect(t.get("experience_earned")).toBe(224),expect(t.get("experience_spent")).toBe(170),e()},function(t){e.fail(t.message)})}),it("can remove a middle one by trigger",function(n){var i=o.View.extend({initialize:function(){e.bindAll(this,"finish")},finish:function(){var e=this;e.stopListening(),expect(t.experience_available()).toBe(54),expect(t.get("experience_earned")).toBe(222),expect(t.get("experience_spent")).toBe(168),n()}});l=new i,l.listenTo(t,"finish_experience_notation_propagation",l.finish),t.get_experience_notations().then(function(e){return t.remove_experience_notation(e.at(e.models.length-3))},function(e){n.fail(e.message)})}),it("can update a middle one by trigger",function(n){var i=o.View.extend({initialize:function(){e.bindAll(this,"finish")},finish:function(){var e=this;e.stopListening(),expect(t.experience_available()).toBe(54),expect(t.get("experience_earned")).toBe(221),expect(t.get("experience_spent")).toBe(167),n()}});l=new i,l.listenTo(t,"finish_experience_notation_propagation",l.finish),t.get_experience_notations().then(function(t){console.log(e.map(t.models,"attributes.earned"));var n=t.at(t.models.length-3);return n.save({alteration_spent:2,alteration_earned:2})},function(e){n.fail(e.message)})}),it("can add a middle one",function(){})}),describe("A Troupe Member",function(){var t,o=r.SAMPLE_TROUPE_ID;beforeAll(function(e){p().then(function(){return expect(n.User.current().get("username")).toBe("sampmem"),i.create_test_character("troupemember")}).then(function(e){return i.get_character(e.id)}).then(function(n){t=n,e()},function(t){e.fail(t)})}),it("can add a vampire",function(n){var i=new c({id:o});console.log("Created the troupe object with id "+o),i.fetch().then(function(i){return console.log("Found the troupe. Making the vampire join the troupe."),t.join_troupe(i).then(function(){console.log("Joined the troupe. Getting the ACL");var e=t.get_me_acl();console.log("Checking the ACLs"),expect(e.getRoleWriteAccess("LST_"+o)).toBe(!0),expect(e.getRoleReadAccess("LST_"+o)).toBe(!0),expect(e.getRoleWriteAccess("AST_"+o)).toBe(!0),expect(e.getRoleReadAccess("AST_"+o)).toBe(!0),n()},function(t){e.isString(t)?n.fail(t):n.fail(t.message)})})}),it("shows her vampire to the AST",function(n){g().then(function(){return i.get_character(t.id)}).then(function(e){var t=e.get_me_acl();expect(t.getRoleWriteAccess("LST_"+o)).toBe(!0),expect(t.getRoleReadAccess("LST_"+o)).toBe(!0),expect(t.getRoleWriteAccess("AST_"+o)).toBe(!0),expect(t.getRoleReadAccess("AST_"+o)).toBe(!0),n()},function(t){e.isString(t)?n.fail(t):n.fail(t.message)})}),it("doesn't show her vampire to everybody",function(e){u().then(function(){return i.get_character(t.id)}).then(function(t){e.fail("Fetched the vampire as devuser")},function(t){e()})}),it("can remove a vampire",function(n){p().then(function(){var e=new c({id:o});return e.fetch()}).then(function(i){return t.leave_troupe(i).then(function(){var e=t.get_me_acl();expect(e.getRoleWriteAccess("LST_"+o)).toBe(!1),expect(e.getRoleReadAccess("LST_"+o)).toBe(!1),expect(e.getRoleWriteAccess("AST_"+o)).toBe(!1),expect(e.getRoleReadAccess("AST_"+o)).toBe(!1),n()},function(t){e.isString(t)?n.fail(t):n.fail(t.message)})})}),it("doesn't show her vampire to the AST",function(e){g().then(function(){return i.get_character(t.id)}).then(function(t){e.fail("Can still fetch vampire after remvoal")},function(t){expect(t.code).toBe(n.Error.OBJECT_NOT_FOUND),e()})}),it("still doesn't show her vampire to everybody",function(e){u().then(function(){return i.get_character(t.id)}).then(function(t){e.fail("Fetched the vampire as devuser")},function(t){e()})}),it("can add and then remove a vampire",function(n){var i;p().then(function(){return new c({id:o}).fetch()}).then(function(e){return i=e,console.log("Joining a troupe"),t.join_troupe(i)}).then(function(e){return console.log("Joined a troupe"),console.log("Leaving a troupe"),t.leave_troupe(i)}).then(function(e){console.log("Left a troupe"),n()}).fail(function(t){e.isString(t)?n.fail(t):n.fail(t.message)})})})});